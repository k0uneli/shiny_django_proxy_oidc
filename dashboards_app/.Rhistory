)
)
# Rename columns based on the column_mapping
colnames(geo_data) <- mapping
#3. filter out the required column for Kaplan Meier
km_data_patient <- df_patient %>%
select(Id = id_patient, end_date = deathdate_patient, Status = survivor)
km_data_condition <- df_condition %>%
select(Id = id_patient, condition = description_condition, start_date = start_condition)
km_data_medication <- df_medication %>%
select(Id = id_patient, group = description_medication)
km_data <- km_data_patient %>%
full_join(km_data_condition, by = "Id", relationship = "many-to-many") %>% ###
full_join(km_data_medication, by = "Id", relationship = "many-to-many") ###
km_data$end_date[is.na(km_data$end_date)] <- format(Sys.Date(), format = "%Y-%m-%d") ###
#calculate survive days by end_date - start_date and assign it to a new column called Times
km_data$start_date <- as.Date(km_data$start_date, format = "%Y-%m-%d")
km_data$end_date <- as.Date(km_data$end_date, format = "%Y-%m-%d")
km_data$Time <- as.integer(km_data$end_date - km_data$start_date)
sorted_km_data <- sort(table(km_data$group), decreasing = TRUE)
drugs_of_interest <- names(sorted_km_data)[1:2]
filtered_km_data <- km_data[km_data$group %in% drugs_of_interest, ]
filtered_km_data <- unique(filtered_km_data)
filtered_km_data <- filtered_km_data[filtered_km_data$Time >= 0, ]
#4.output a basic info dataframe
info_df <- data.frame(
condition = observe_condition,
total_patient = total_patient,
total_medication_record = total_medication_record,
row.names = NULL
)
return(list(geo_data = geo_data, km_data = filtered_km_data, info_df = info_df))
}
get_tidy_dataframe(non_standard_data)
#function to tidyup csv and return 3 dataframes for visualization: geomap_data, km_data, and info_data
get_tidy_dataframe <- function(data) {
#1. split combined csv into three separated df: patient, condition, medication.
#fill NA values in 'redcap_repeat_instrument' column with "patient"
data$redcap_repeat_instrument <- dplyr::coalesce(data$redcap_repeat_instrument, "patient")
#split the dataframe into a list of dataframes based on the values in 'redcap_repeat_instrument'
df_list <- split(data, data$redcap_repeat_instrument)
df_patient <- df_list[["patient"]]
df_condition <- df_list[["conditions"]]
df_medication <- df_list[["medications"]]
#choose a condition (the most popular one)
observe_condition <- names(table(df_condition$description_condition))[which.max(table(df_condition$description_condition))]
#check whether patient is a survivor
df_patient$survivor <- ifelse(is.na(df_patient$deathdate_patient) , 0, 1)
#shorten the name for ethnicity
df_patient <- df_patient %>%
mutate(ethnicity_patient = case_when(
ethnicity_patient == "Aboriginal and Torres Strait Islander" ~ "Aboriginal",
TRUE ~ ethnicity_patient
))
#get basic info TBC
total_patient <- nrow(df_patient)
total_medication_record <- nrow(df_medication)
#2. filter out the required column for geo map
# Create an empty DataFrame for df_geo_data
geo_data <- data.frame(Id = character(),
RACE = character(),
GENDER = character(),
ETHNICITY = character(),
INCOME = numeric(),
HEALTHCARE_EXPENSES = numeric(),
HEALTHCARE_COVERAGE = numeric(),
Suburb = character(),
VALUE = character())
# Column names to match
mapping <- c(Id = "id_patient",
RACE = "race_patient",
GENDER = "gender_patient",
ETHNICITY = "ethnicity_patient",
INCOME = "income_patient",
HEALTHCARE_EXPENSES = "healthcare_expenses_patient",
HEALTHCARE_COVERAGE = "healthcare_coverage_patient",
Suburb = "county_patient",
VALUE = "survivor")
for (i in seq_along(df_patient)) {
row <- df_patient[i, ]
new_row <- sapply(names(geo_data), function(col) {
if (mapping[col] %in% names(row)) {
row[mapping[col]]
} else {
NA
}
})
geo_data <- rbind(geo_data, new_row)
}
#3. filter out the required column for Kaplan Meier
km_data_patient <- df_patient %>%
select(Id = id_patient, end_date = deathdate_patient, Status = survivor)
km_data_condition <- df_condition %>%
select(Id = id_patient, condition = description_condition, start_date = start_condition)
km_data_medication <- df_medication %>%
select(Id = id_patient, group = description_medication)
km_data <- km_data_patient %>%
full_join(km_data_condition, by = "Id", relationship = "many-to-many") %>% ###
full_join(km_data_medication, by = "Id", relationship = "many-to-many") ###
km_data$end_date[is.na(km_data$end_date)] <- format(Sys.Date(), format = "%Y-%m-%d") ###
#calculate survive days by end_date - start_date and assign it to a new column called Times
km_data$start_date <- as.Date(km_data$start_date, format = "%Y-%m-%d")
km_data$end_date <- as.Date(km_data$end_date, format = "%Y-%m-%d")
km_data$Time <- as.integer(km_data$end_date - km_data$start_date)
sorted_km_data <- sort(table(km_data$group), decreasing = TRUE)
drugs_of_interest <- names(sorted_km_data)[1:2]
filtered_km_data <- km_data[km_data$group %in% drugs_of_interest, ]
filtered_km_data <- unique(filtered_km_data)
filtered_km_data <- filtered_km_data[filtered_km_data$Time >= 0, ]
#4.output a basic info dataframe
info_df <- data.frame(
condition = observe_condition,
total_patient = total_patient,
total_medication_record = total_medication_record,
row.names = NULL
)
return(list(geo_data = geo_data, km_data = filtered_km_data, info_df = info_df))
}
get_tidy_dataframe(non_standard_data)
non_standard_data
get_tidy_dataframe(non_standard_data)
#function to tidyup csv and return 3 dataframes for visualization: geomap_data, km_data, and info_data
get_tidy_dataframe <- function(data) {
#1. split combined csv into three separated df: patient, condition, medication.
#fill NA values in 'redcap_repeat_instrument' column with "patient"
data$redcap_repeat_instrument <- dplyr::coalesce(data$redcap_repeat_instrument, "patient")
#split the dataframe into a list of dataframes based on the values in 'redcap_repeat_instrument'
df_list <- split(data, data$redcap_repeat_instrument)
df_patient <- df_list[["patient"]]
df_condition <- df_list[["conditions"]]
df_medication <- df_list[["medications"]]
#choose a condition (the most popular one)
observe_condition <- names(table(df_condition$description_condition))[which.max(table(df_condition$description_condition))]
#check whether patient is a survivor
df_patient$survivor <- ifelse(is.na(df_patient$deathdate_patient) , 0, 1)
#shorten the name for ethnicity
df_patient <- df_patient %>%
mutate(ethnicity_patient = case_when(
ethnicity_patient == "Aboriginal and Torres Strait Islander" ~ "Aboriginal",
TRUE ~ ethnicity_patient
))
#get basic info TBC
total_patient <- nrow(df_patient)
total_medication_record <- nrow(df_medication)
#2. filter out the required column for geo map
# Create an empty DataFrame for df_geo_data
# Intended structure of df_geo_data
geo_data <- data.frame(Id = character(),
RACE = character(),
INCOME = numeric(),
Suburb = character(),
VALUE = character(),
HEALTHCARE_COVERAGE = character())
# Transformation
geo_data <- df_patient %>%
select_if(colnames(.) %in% names(geo_data)) %>%
rename_with(.cols = names(geo_data), .funs = sub("_patient$", "", .cols)) %>%
mutate_all(if_all(is.na, ~ NA_character_))
geo_data <- rbind(geo_data, new_row)
#3. filter out the required column for Kaplan Meier
km_data_patient <- df_patient %>%
select(Id = id_patient, end_date = deathdate_patient, Status = survivor)
km_data_condition <- df_condition %>%
select(Id = id_patient, condition = description_condition, start_date = start_condition)
km_data_medication <- df_medication %>%
select(Id = id_patient, group = description_medication)
km_data <- km_data_patient %>%
full_join(km_data_condition, by = "Id", relationship = "many-to-many") %>% ###
full_join(km_data_medication, by = "Id", relationship = "many-to-many") ###
km_data$end_date[is.na(km_data$end_date)] <- format(Sys.Date(), format = "%Y-%m-%d") ###
#calculate survive days by end_date - start_date and assign it to a new column called Times
km_data$start_date <- as.Date(km_data$start_date, format = "%Y-%m-%d")
km_data$end_date <- as.Date(km_data$end_date, format = "%Y-%m-%d")
km_data$Time <- as.integer(km_data$end_date - km_data$start_date)
sorted_km_data <- sort(table(km_data$group), decreasing = TRUE)
drugs_of_interest <- names(sorted_km_data)[1:2]
filtered_km_data <- km_data[km_data$group %in% drugs_of_interest, ]
filtered_km_data <- unique(filtered_km_data)
filtered_km_data <- filtered_km_data[filtered_km_data$Time >= 0, ]
#4.output a basic info dataframe
info_df <- data.frame(
condition = observe_condition,
total_patient = total_patient,
total_medication_record = total_medication_record,
row.names = NULL
)
return(list(geo_data = geo_data, km_data = filtered_km_data, info_df = info_df))
}
get_tidy_dataframe(non_standard_data)
#function to tidyup csv and return 3 dataframes for visualization: geomap_data, km_data, and info_data
get_tidy_dataframe <- function(data) {
#1. split combined csv into three separated df: patient, condition, medication.
#fill NA values in 'redcap_repeat_instrument' column with "patient"
data$redcap_repeat_instrument <- dplyr::coalesce(data$redcap_repeat_instrument, "patient")
#split the dataframe into a list of dataframes based on the values in 'redcap_repeat_instrument'
df_list <- split(data, data$redcap_repeat_instrument)
df_patient <- df_list[["patient"]]
df_condition <- df_list[["conditions"]]
df_medication <- df_list[["medications"]]
#choose a condition (the most popular one)
observe_condition <- names(table(df_condition$description_condition))[which.max(table(df_condition$description_condition))]
#check whether patient is a survivor
df_patient$survivor <- ifelse(is.na(df_patient$deathdate_patient) , 0, 1)
#shorten the name for ethnicity
df_patient <- df_patient %>%
mutate(ethnicity_patient = case_when(
ethnicity_patient == "Aboriginal and Torres Strait Islander" ~ "Aboriginal",
TRUE ~ ethnicity_patient
))
#get basic info TBC
total_patient <- nrow(df_patient)
total_medication_record <- nrow(df_medication)
#2. filter out the required column for geo map
# Create an empty DataFrame for df_geo_data
# Intended structure of df_geo_data
match_data <- data.frame(
Id = character(),
RACE = character(),
GENDER = character(),
ETHNICITY = character(),
INCOME = numeric(),
HEALTHCARE_EXPENSES = numeric(),
HEALTHCARE_COVERAGE = numeric(),
Suburb = character(),
VALUE = numeric(),
stringsAsFactors = FALSE
)
column_mapping <- c(
id_patient = "Id",
race_patient = "RACE",
gender_patient = "GENDER",
ethnicity_patient = "ETHNICITY",
income_patient = "INCOME",
healthcare_expenses_patient = "HEALTHCARE_EXPENSES",
healthcare_coverage_patient = "HEALTHCARE_COVERAGE",
county_patient = "Suburb",
survivor = "VALUE"
)
geo_data <- df_patient %>%
select_if(function(col) col %in% names(column_mapping)) %>%
rename_all(~ column_mapping[.])
# Add missing columns with all NA values
missing_columns <- setdiff(names(match_data), names(geo_data))
for (col in missing_columns) {
geo_data[[col]] <- NA
}
#3. filter out the required column for Kaplan Meier
km_data_patient <- df_patient %>%
select(Id = id_patient, end_date = deathdate_patient, Status = survivor)
km_data_condition <- df_condition %>%
select(Id = id_patient, condition = description_condition, start_date = start_condition)
km_data_medication <- df_medication %>%
select(Id = id_patient, group = description_medication)
km_data <- km_data_patient %>%
full_join(km_data_condition, by = "Id", relationship = "many-to-many") %>% ###
full_join(km_data_medication, by = "Id", relationship = "many-to-many") ###
km_data$end_date[is.na(km_data$end_date)] <- format(Sys.Date(), format = "%Y-%m-%d") ###
#calculate survive days by end_date - start_date and assign it to a new column called Times
km_data$start_date <- as.Date(km_data$start_date, format = "%Y-%m-%d")
km_data$end_date <- as.Date(km_data$end_date, format = "%Y-%m-%d")
km_data$Time <- as.integer(km_data$end_date - km_data$start_date)
sorted_km_data <- sort(table(km_data$group), decreasing = TRUE)
drugs_of_interest <- names(sorted_km_data)[1:2]
filtered_km_data <- km_data[km_data$group %in% drugs_of_interest, ]
filtered_km_data <- unique(filtered_km_data)
filtered_km_data <- filtered_km_data[filtered_km_data$Time >= 0, ]
#4.output a basic info dataframe
info_df <- data.frame(
condition = observe_condition,
total_patient = total_patient,
total_medication_record = total_medication_record,
row.names = NULL
)
return(list(geo_data = geo_data, km_data = filtered_km_data, info_df = info_df))
}
get_tidy_dataframe(non_standard_data)
#function to tidyup csv and return 3 dataframes for visualization: geomap_data, km_data, and info_data
get_tidy_dataframe <- function(data) {
#1. split combined csv into three separated df: patient, condition, medication.
#fill NA values in 'redcap_repeat_instrument' column with "patient"
data$redcap_repeat_instrument <- dplyr::coalesce(data$redcap_repeat_instrument, "patient")
#split the dataframe into a list of dataframes based on the values in 'redcap_repeat_instrument'
df_list <- split(data, data$redcap_repeat_instrument)
df_patient <- df_list[["patient"]]
df_condition <- df_list[["conditions"]]
df_medication <- df_list[["medications"]]
#choose a condition (the most popular one)
observe_condition <- names(table(df_condition$description_condition))[which.max(table(df_condition$description_condition))]
#check whether patient is a survivor
df_patient$survivor <- ifelse(is.na(df_patient$deathdate_patient) , 0, 1)
#shorten the name for ethnicity
df_patient <- df_patient %>%
mutate(ethnicity_patient = case_when(
ethnicity_patient == "Aboriginal and Torres Strait Islander" ~ "Aboriginal",
TRUE ~ ethnicity_patient
))
#get basic info TBC
total_patient <- nrow(df_patient)
total_medication_record <- nrow(df_medication)
#2. filter out the required column for geo map
# Create an empty DataFrame for df_geo_data
# Intended structure of df_geo_data
match_data <- data.frame(
Id = character(),
RACE = character(),
GENDER = character(),
ETHNICITY = character(),
INCOME = numeric(),
HEALTHCARE_EXPENSES = numeric(),
HEALTHCARE_COVERAGE = numeric(),
Suburb = character(),
VALUE = numeric(),
stringsAsFactors = FALSE
)
column_mapping <- c(
id_patient = "Id",
race_patient = "RACE",
gender_patient = "GENDER",
ethnicity_patient = "ETHNICITY",
income_patient = "INCOME",
healthcare_expenses_patient = "HEALTHCARE_EXPENSES",
healthcare_coverage_patient = "HEALTHCARE_COVERAGE",
county_patient = "Suburb",
survivor = "VALUE"
)
geo_data <- df_patient %>%
select_if(any_of(names(column_mapping))) %>%
rename_all(~ column_mapping[.])
# Add missing columns with all NA values
missing_columns <- setdiff(names(match_data), names(geo_data))
for (col in missing_columns) {
geo_data[[col]] <- NA
}
#3. filter out the required column for Kaplan Meier
km_data_patient <- df_patient %>%
select(Id = id_patient, end_date = deathdate_patient, Status = survivor)
km_data_condition <- df_condition %>%
select(Id = id_patient, condition = description_condition, start_date = start_condition)
km_data_medication <- df_medication %>%
select(Id = id_patient, group = description_medication)
km_data <- km_data_patient %>%
full_join(km_data_condition, by = "Id", relationship = "many-to-many") %>% ###
full_join(km_data_medication, by = "Id", relationship = "many-to-many") ###
km_data$end_date[is.na(km_data$end_date)] <- format(Sys.Date(), format = "%Y-%m-%d") ###
#calculate survive days by end_date - start_date and assign it to a new column called Times
km_data$start_date <- as.Date(km_data$start_date, format = "%Y-%m-%d")
km_data$end_date <- as.Date(km_data$end_date, format = "%Y-%m-%d")
km_data$Time <- as.integer(km_data$end_date - km_data$start_date)
sorted_km_data <- sort(table(km_data$group), decreasing = TRUE)
drugs_of_interest <- names(sorted_km_data)[1:2]
filtered_km_data <- km_data[km_data$group %in% drugs_of_interest, ]
filtered_km_data <- unique(filtered_km_data)
filtered_km_data <- filtered_km_data[filtered_km_data$Time >= 0, ]
#4.output a basic info dataframe
info_df <- data.frame(
condition = observe_condition,
total_patient = total_patient,
total_medication_record = total_medication_record,
row.names = NULL
)
return(list(geo_data = geo_data, km_data = filtered_km_data, info_df = info_df))
}
get_tidy_dataframe(non_standard_data)
#function to tidyup csv and return 3 dataframes for visualization: geomap_data, km_data, and info_data
get_tidy_dataframe <- function(data) {
#1. split combined csv into three separated df: patient, condition, medication.
#fill NA values in 'redcap_repeat_instrument' column with "patient"
data$redcap_repeat_instrument <- dplyr::coalesce(data$redcap_repeat_instrument, "patient")
#split the dataframe into a list of dataframes based on the values in 'redcap_repeat_instrument'
df_list <- split(data, data$redcap_repeat_instrument)
df_patient <- df_list[["patient"]]
df_condition <- df_list[["conditions"]]
df_medication <- df_list[["medications"]]
#choose a condition (the most popular one)
observe_condition <- names(table(df_condition$description_condition))[which.max(table(df_condition$description_condition))]
#check whether patient is a survivor
df_patient$survivor <- ifelse(is.na(df_patient$deathdate_patient) , 0, 1)
#shorten the name for ethnicity
df_patient <- df_patient %>%
mutate(ethnicity_patient = case_when(
ethnicity_patient == "Aboriginal and Torres Strait Islander" ~ "Aboriginal",
TRUE ~ ethnicity_patient
))
#get basic info TBC
total_patient <- nrow(df_patient)
total_medication_record <- nrow(df_medication)
#2. filter out the required column for geo map
# Create an empty DataFrame for df_geo_data
# Intended structure of df_geo_data
match_data <- data.frame(
Id = character(),
RACE = character(),
GENDER = character(),
ETHNICITY = character(),
INCOME = numeric(),
HEALTHCARE_EXPENSES = numeric(),
HEALTHCARE_COVERAGE = numeric(),
Suburb = character(),
VALUE = numeric(),
stringsAsFactors = FALSE
)
column_mapping <- c(
id_patient = "Id",
race_patient = "RACE",
gender_patient = "GENDER",
ethnicity_patient = "ETHNICITY",
income_patient = "INCOME",
healthcare_expenses_patient = "HEALTHCARE_EXPENSES",
healthcare_coverage_patient = "HEALTHCARE_COVERAGE",
county_patient = "Suburb",
survivor = "VALUE"
)
geo_data <- df_patient %>%
select(any_of(names(column_mapping))) %>%
rename_all(~ column_mapping[.])
# Add missing columns with all NA values
missing_columns <- setdiff(names(match_data), names(geo_data))
for (col in missing_columns) {
geo_data[[col]] <- NA
}
#3. filter out the required column for Kaplan Meier
km_data_patient <- df_patient %>%
select(Id = id_patient, end_date = deathdate_patient, Status = survivor)
km_data_condition <- df_condition %>%
select(Id = id_patient, condition = description_condition, start_date = start_condition)
km_data_medication <- df_medication %>%
select(Id = id_patient, group = description_medication)
km_data <- km_data_patient %>%
full_join(km_data_condition, by = "Id", relationship = "many-to-many") %>% ###
full_join(km_data_medication, by = "Id", relationship = "many-to-many") ###
km_data$end_date[is.na(km_data$end_date)] <- format(Sys.Date(), format = "%Y-%m-%d") ###
#calculate survive days by end_date - start_date and assign it to a new column called Times
km_data$start_date <- as.Date(km_data$start_date, format = "%Y-%m-%d")
km_data$end_date <- as.Date(km_data$end_date, format = "%Y-%m-%d")
km_data$Time <- as.integer(km_data$end_date - km_data$start_date)
sorted_km_data <- sort(table(km_data$group), decreasing = TRUE)
drugs_of_interest <- names(sorted_km_data)[1:2]
filtered_km_data <- km_data[km_data$group %in% drugs_of_interest, ]
filtered_km_data <- unique(filtered_km_data)
filtered_km_data <- filtered_km_data[filtered_km_data$Time >= 0, ]
#4.output a basic info dataframe
info_df <- data.frame(
condition = observe_condition,
total_patient = total_patient,
total_medication_record = total_medication_record,
row.names = NULL
)
return(list(geo_data = geo_data, km_data = filtered_km_data, info_df = info_df))
}
get_tidy_dataframe(non_standard_data)
runApp('app - 副本.R')
runApp('app - 副本.R')
library(shiny); runApp('app_v1.R')
runApp('app_v1.R')
library(mongolite)
library(forcats)
library(tidyr)
library(dplyr)
library(leaflet)
library(maps)
library(sf)
library(ggplot2)
library(shiny)
library(shinydashboard)
library(survival)
library(survminer)
library(ggfortify)
library(plotly)
library(ggsurvfit)
library(stringr)
library(shiny); runApp('app_v1.R')
library(mongolite)
library(forcats)
library(tidyr)
library(dplyr)
library(leaflet)
library(maps)
library(sf)
library(ggplot2)
library(shiny)
library(shinydashboard)
library(survival)
library(survminer)
library(ggfortify)
library(plotly)
library(ggsurvfit)
library(stringr)
runApp('app_v1.R')
traceback()
fetch_data
heart_disease_data
geo_data1
str(geo_data1）
str(geo_data1)
str(km_data1）
str(km_data1)
runApp('app_v1.R')
runApp()
runApp()
runApp('app_v1.R')
runApp()
melbourne_suburbs_data
melbourne_suburbs
agg_data()
agg_data
patient_data_selected_suburb
runApp('app_v1.R')
runApp('app_v1.R')
str(geo_data1)
runApp('app_v1.R')
library(shiny); runApp('app_v1.R')
library(shiny); runApp('app_v1.R')
